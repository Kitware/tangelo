#!${PYTHON_EXECUTABLE}

import argparse
import cherrypy
import cherrypy.lib.static
import cherrypy.process.plugins
import datetime
import HTMLParser
import imp
import json
import md5
import os
import os.path
import platform
import signal
import subprocess
import sys
import tangelo
import traceback
import time
import types

class Server(object):
    # An HTML parser for use in the error_page handler.
    html = HTMLParser.HTMLParser()

    def __init__(self, auth):
        # A boolean indicating whether to perform HTTP authentication or not.
        self.auth = auth

        # A handle to the CherryPy app itself, for purposes of installing
        # configs to execute authentication.
        self.app = None

        # A dict containing information about currently installed authentication
        # handlers.
        self.security = {}

        # A dict containing currently running streaming data sources.
        self.streams = {}

    @staticmethod
    def error_page(status, message, traceback, version):
        message = Server.html.unescape(message)
        return """<!doctype html>
<h2>%s</h2>
<p>%s
<hr>
<p><em>Powered by Tangelo</em> <img src=/img/tangelo.ico>""" % (status, message)

    @staticmethod
    def parse_htaccess(filename):
        result = {"msg": None,
                  "auth_type": None,
                  "user_file": None,
                  "realm": None,
                  "userpass": None}

        # Create a list of acceptable authentication types.
        allowed = ["digest"]

        # Try to open and parse the file.
        try:
            with open(filename) as f:
                lines = filter(lambda x: len(x) > 0, map(lambda x: x.strip().split(), f.readlines()))
                keys = map(lambda x: x[0], lines)
                values = map(lambda x: " ".join(x[1:]), lines)

                for i, (k, v) in enumerate(zip(keys, values)):
                    if k == "AuthType":
                        if v not in allowed:
                            result["msg"] = "%s is not a supported authentication type.  The supported types are: %s" % (v, ", ".join(allowed))
                            return result
                        else:
                            result["auth_type"] = v
                    elif k in ["AuthPasswordFile", "AuthUserFile"]:
                        result["user_file"] = v
                    elif k == "AuthRealm":
                        result["realm"] = v
                    else:
                        result["msg"] = "Unknown key '%s' on line %d of file '%s'" % (k, i+1, filename)
                        return result
        except IOError:
            result["msg"] = "Could not open file '%s'" % (filename)
            return result

        # Open the user file and parse out the username/passwords of those users
        # in the correct realm.
        recs = None
        if result["user_file"] is not None:
            try:
                with open(result["user_file"]) as f:
                    recs = filter(lambda x: x[1] == result["realm"], map(lambda x: x.strip().split(":"), f.readlines()))
            except IOError:
                result["msg"] = "Could not open user password file '%s'" % (result["user_file"])
                return result
            except IndexError:
                result["msg"] = "Malformed content in user password file '%s' (some line has too few fields)" % (result["user_file"])
                return result

        try:
            result["userpass"] = {x[0]: x[2] for x in recs}
        except IndexError:
            result["msg"] = "Malformed content in user password file '%s' (some line has too few fields)" % (result["user_file"])
            return result

        return result

    def invoke_service(self, module, *pargs, **kwargs):
        # TODO(choudhury): This method should attempt to load the named module, then invoke it
        # with the given arguments.  However, if the named module is "config" or
        # something similar, the method should instead launch a special "config"
        # app, which lists the available app modules, along with docstrings or
        # similar.  It should also allow the user to add/delete search paths for
        # other modules.
        tangelo.content_type("text/plain")

        # Save the system path (be sure to *make a copy* using the list()
        # function) - it will be modified before invoking the service, and must
        # be restored afterwards.
        origpath = list(sys.path)

        # By default, the result should be a bare response that we will place an
        # error message in if something goes wrong; if nothing goes wrong this
        # will be replaced with some other object.
        result = tangelo.empty_response()

        # Compute the module's home path, and let the tangelo module know about
        # it (in case the module, upon loading, wishes to use the
        # tangelo.paths() function).
        modpath = os.path.dirname(module)
        tangelo.modulepath(modpath)

        # Extend the system path with the module's home path.
        sys.path.insert(0, modpath)

        # Import the module.
        try:
            service = imp.load_source("service", module)
        except:
            bt = traceback.format_exc()

            tangelo.log("Error importing module %s" % (tangelo.request_path()), "SERVICE")
            tangelo.log(bt, "SERVICE")

            result = tangelo.HTTPStatusCode("501 Error in Python Service", "There was an error while trying to import module %s:<br><pre>%s</pre>" % (tangelo.request_path(), bt))
        else:
            # Try to run the service - either it's in a function called "run()",
            # or else it's in a REST API consisting of at least one of "get()",
            # "put()", "post()", or "delete()".
            #
            # Collect the result in a variable - depending on its type, it will be
            # transformed in some way below (by default, to JSON, but may also raise
            # a cherrypy exception, log itself in a streaming table, etc.).
            #
            try:
                if 'run' in dir(service):
                    # Call the module's run() method, passing it the positional and
                    # keyword args that came into this method.
                    result = service.run(*pargs, **kwargs)
                else:
                    # Reaching here means it's a REST API.  Check for the
                    # requested method, ensure that it was marked as being part
                    # of the API, and call it; or give a 405 error.
                    method = cherrypy.request.method
                    restfunc = service.__dict__[method.lower()]
                    if restfunc is not None and hasattr(restfunc, "restful") and restfunc.restful:
                        result = restfunc(*pargs, **kwargs)
                    else:
                        result = tangelo.HTTPStatusCode(405, "Method not allowed")
            except Exception as e:
                bt = traceback.format_exc()

                tangelo.log("Caught exception while executing service %s" % (tangelo.request_path()), "SERVICE")
                tangelo.log(bt, "SERVICE")

                result = tangelo.HTTPStatusCode("501 Error in Python Service", "There was an error executing service %s:<br><pre>%s</pre>" % (tangelo.request_path(), bt))

        # Restore the path to what it was originally.
        sys.path = origpath

        # Check the type of the result to decide what result to finally return:
        #
        # 1. If it is an HTTPStatusCode object, raise a cherrypy HTTPError
        # exception, which will cause the browser to do the right thing.
        #
        # 2. TODO: If it's a Python generator object, log it with the Tangelo
        # streaming API.
        #
        # 3. If it's a Python dictionary, convert it to JSON.
        #
        # 4. If it's a string, don't do anything to it.
        #
        # This allows the services to return a Python object if they wish, or to
        # perform custom serialization (such as for MongoDB results, etc.).
        if isinstance(result, tangelo.HTTPStatusCode):
            if result.msg:
                raise cherrypy.HTTPError(result.code, result.msg)
            else:
                raise cherrypy.HTTPError(result.code)
        elif "next" in dir(result):
            # Generate a key corresponding to this object, using 100 random
            # bytes from the system - ensure the random key is not already in
            # the table (even though it would be crazy to wind up with a
            # collision).
            key = md5.md5(os.urandom(100)).hexdigest()
            while key in self.streams:
                key = md5.md5(os.urandom(100)).hexdigest()

            # Log the object in the streaming table.
            self.streams[key] = result

            # Create an object describing the logging of the generator object.
            result = tangelo.empty_response()
            result["stream_key"] = key

            # Serialize it to JSON.
            result = json.dumps(result)
        elif not isinstance(result, types.StringTypes):
            try:
                result = json.dumps(result)
            except TypeError as e:
                t = e.message.split("<service.")[1].split()[0]
                msg = "Service %s returned an object of type %s that could not be serialized to JSON" % (tangelo.request_path(), t)

                tangelo.log("Error: %s" % (msg), "SERVICE")

                raise cherrypy.HTTPError("501 Error in Python Service", msg)

        return result

    @staticmethod
    def dirlisting(dirpath, reqpath):
        files = filter(lambda x: len(x) > 0 and x[0] != ".", os.listdir(dirpath))
        #filespec = ["Type", "Name", "Last modified", "Size"]
        filespec = []
        for f in files:
            p = dirpath + os.path.sep + f
            s = os.stat(p)
            mtime = datetime.datetime.fromtimestamp(s.st_mtime).strftime("%Y-%m-%d %H:%M:%S")

            if os.path.isdir(p):
                f += "/"
                t = "dir"
                s = "-"
            else:
                t = "file"
                s = s.st_size

            filespec.append([t, "<a href=\"%s/%s\">%s</a>" % (reqpath, f, f), mtime, s])

        filespec = "\n".join(map(lambda row: "<tr>" + "".join(map(lambda x: "<td>%s</td>" % x, row)) + "</tr>", filespec))

        result = """<!doctype html>
<title>Index of %s</title>
<h1>Index of %s</h1>
<table>
<tr>
    <th>Type</th><th>Name</th><th>Last Modified</th><th>Size</th>
</tr>
%s
</table>
""" % (reqpath, reqpath, filespec)

        #return "<!doctype html><h1>Directory Listing</h1>This is a dummy directory listing placeholder."
        return result

    def htaccess(self, htfile, path_info):
        # TODO(choudhury): look at
        # /usr/lib/python2.7/site-packages/cherrypy/lib/auth_digest.py and
        # /usr/lib/python2.7/site-packages/cherrypy/test/test_auth_digest.py for
        # examples of how to do digest auth.  Will want to have users use a
        # tangpass sort of script to generate .htaccess files, so the digest
        # method can remain consistent.
        #
        # May also want to include a basic auth path as well, perhaps depending
        # on a key/value in the .htaccess file itself.

        # If there is no htfile, then ensure that the path is unregistered from
        # the security dict, and unregister the config found there.  Otherwise,
        # parse the htfile and add whatever is found there to the security
        # registry and the application configuration.
        if htfile is None:
            if path_info in self.security:
                del self.security[path_info]
                self.app.pop(path_info, None)
        else:
            # Stat the file specifically to learn it's last-modified time.
            ht_mtime = os.stat(htfile).st_mtime

            if path_info not in self.security or ht_mtime > self.security[path_info]:
                # We have found an htaccess file - if there is NO ENTRY in the
                # security table, OR there IS an entry but the htaccess file is
                # NEWER than the one used to create that entry, then we need to
                # parse the file and insert (or update) the record in the table.
                htspec = Server.parse_htaccess(htfile)
                if htspec["msg"]:
                    tangelo.log("Could not register %s: %s" % (path_info, htspec["msg"]), "HTACCESS")
                    return htspec["msg"]

                # Declare an auth config object using the values in the HtAccess
                # object.
                toolname = "tools.auth_%s.%s" % (htspec["auth_type"], "%s")
                passdict = lambda realm, username: htspec["userpass"].get(username)
                auth_conf = {toolname % "on": True,
                             toolname % "realm": htspec["realm"],
                             toolname % "get_ha1": passdict,
                             toolname % "key": "deadbeef"}

                self.app.merge({path_info: auth_conf})

                # Store the htfile's last-modified time.
                self.security[path_info] = ht_mtime

        return None

    @cherrypy.expose
    def default(self, *path, **args):
        if self.app is None:
            self.app = cherrypy.tree.apps.values()[0]

        # Convert the path argument into a list (from a tuple).
        path = list(path)

        # If there are no positional arguments, behave as though the root
        # index.html was requested.
        if len(path) == 0:
            path = ["index.html"]

        # Check the first character of the first path component.  If it's a
        # tilde, then assume the path points into a user's home directory.
        if path[0][0] == "~":
            # Only treat this component as a home directory if there is actually
            # text following the tilde (rather than making the server serve
            # files from the home directory of whatever user account it is using
            # to run).
            if len(path[0]) > 1:
                # Expand the home directory, append the tangelo_html
                # subdirectory, and then the tail of the original path.
                path = os.path.expanduser(path[0]).split(os.path.sep) + ["tangelo_html"] + path[1:]
        else:
            # TODO(choudhury): check a table of configured custom mappings to
            # see if the first path component should be mapped to some other
            # filesystem path.

            # Reaching this point means the path is relative to the server's web
            # root.
            path = [tangelo.webroot()] + path

        # Form a path name from the path components.
        finalpath = os.path.sep.join(path)

        # If the path represents a directory, assume the request is for an
        # index.html file (look for an index.htm as a backup, and as a last
        # resort, assume the user wants to see a directory listing).
        #
        # As this transformation is taking place, use the information to
        # possibly modify the request path info as well.
        reqpath = cherrypy.request.path_info
        if reqpath[-1] == "/":
            reqpath = reqpath[:-1]
        if os.path.isdir(finalpath):
            # If the URL is a directory, but without a trailing slash, redirect
            # to the equivalent URL *with* a trailing slash.
            if cherrypy.request.path_info == "" or cherrypy.request.path_info[-1] != "/":
                raise cherrypy.HTTPRedirect(cherrypy.request.path_info + "/")

            if os.path.exists(finalpath + os.path.sep + "index.html"):
                path += ["index.html"]
                finalpath += os.path.sep + "index.html"
                reqpath += "/index.html"
            elif os.path.exists(finalpath + os.path.sep + "index.htm"):
                path += ["index.htm"]
                finalpath += os.path.sep + "index.htm"
                reqpath += "/index.htm"
            else:
                finalpath += os.path.sep
                reqpath += "/"

        # Check to see whether the path is protected by an .htaccess file
        # (anywhere in either the requested path's directory itself, or any
        # ancestor directory).
        if self.auth:
            reqpathcomp = reqpath.split("/")

            # Now begin checking each directory up to the root for an updated
            # .htaccess file.
            for i in range(len(reqpathcomp), 0, -1):
                done = False

                rqp = "/".join(reqpathcomp[:i])
                fp = os.path.sep.join(path[:i])

                # Special case detection - if we wind up with rqp as "" or "/", then
                # this means we have reached the web root and it is the last case we
                # need to check.  Furthermore, if we arrived here by going one level
                # up from someone's private web directory (e.g. from "/~roni") then
                # we need to reset the filepath to point at the web root as well.
                if rqp in ["", "/"]:
                    done = True
                    rqp = "/"
                    fp = current_dir + os.path.sep + "web"

                htfile = fp + "/.htaccess"
                if not os.path.exists(htfile):
                    htfile = None
                msg = self.htaccess(htfile, rqp)
                if msg is not None:
                    raise cherrypy.HTTPError(401, "There was an error in the HTTP authentication process: %s" % (msg))

                if done:
                    break

        # If the reqpath represents a directory (besides the web root), remove
        # the trailing slash.
        if reqpath == "":
            reqpath = "/"
        elif reqpath[-1] == "/":
            reqpath = reqpath[:-1]

        # Check the path components for a .py file.  If we find one, we'll take
        # it to mean that (1) the user is trying to invoke that file as a web
        # service and (2) anything appearing after that point in the URL is a
        # positional argument to the service.
        service_path = None
        pargs = None
        for i, p in enumerate(map(lambda x: os.sep.join(x), [path[:i] for i in range(len(path)+1)])):
            if not os.path.isdir(p) and not os.path.exists(p) and os.path.exists(p + ".py"):
                service_path = p + ".py"
                pargs = path[i:]

        # Serve the requested resource.
        if service_path is not None:
            return self.invoke_service(service_path, *pargs, **args)
        elif os.path.isdir(finalpath):
            return Server.dirlisting(finalpath, reqpath)
        else:
            return cherrypy.lib.static.serve_file(finalpath)

    @cherrypy.expose
    def stream(self, key=None, action="next"):
        if action != "show":
            # Check for key parameter.
            if key is None:
                raise cherrypy.HTTPError("400 Required Query Parameter Missing", "The streaming API requires a 'key' query parameter")

            # Check that the key actually exists.
            if key not in self.streams:
                raise cherrypy.HTTPError("404 Key Not Found", "The key '%s' does not reference any existing stream" % (key))

        # Construct a container object.
        result = tangelo.empty_response()

        # Perform the requested action.
        actions = ["next", "delete", "show"]
        if action == "next":
            # Grab the stream in preparation for running it.
            stream = self.streams[key]

            # Attempt to run the stream via its next() method - if this yields a
            # result, then continue; if the next() method raises StopIteration,
            # then there are no more results to retrieve; if any other exception
            # is raised, this is treated as an error.
            try:
                result["stream_finished"] = False
                result["result"] = stream.next()
            except StopIteration:
                result["stream_finished"] = True
                del self.streams[key]
            except:
                del self.streams[key]
                raise cherrypy.HTTPError("501 Error in Python Service", "Caught exception while executing stream service keyed by %s:<br><pre>%s</pre>" % (key, traceback.format_exc()))

        elif action == "delete":
            del self.streams[key]
            result["result"] = "OK"
        elif action == "show":
            raise cherrypy.HTTPError("501 Unimplemented", "The 'show' action in the Tangelo streaming API has not yet been implemented")
        else:
            raise cherrypy.HTTPError("400 Bad Query Parameter", "The 'action' parameter must be one of: %s" % (", ".join(actions)))

        try:
            result = json.dumps(result)
        except TypeError:
            raise cherrypy.HTTPError("501 Bad Response from Python Service", "The stream keyed by %s returned a non JSON-seriazable result: %s" % (key, result["result"]))

        return result

def start():
    sys.stderr.write("starting tangelo...")

    # The presence of a pid file means this instance of Tangelo is already
    # running.
    if os.path.exists(pidfile):
        sys.stderr.write("failed (already seems to be running)\n")
        return 1

    # Make sure the working directory is the place where the control script
    # lives.
    os.chdir(path)

    # Set up the global configuration.  This includes the hostname and port
    # number as specified in the CMake phase.
    #
    # Whether to log directly to the screen has to do with whether we are
    # daemonizing - if we are, we want to suppress the output, and if we are
    # not, we want to see everything.
    cherrypy.config.update({"environment": "production",
                            "log.error_file": logfile,
                            "log.screen": not daemonize,
                            "server.socket_host": hostname,
                            "server.socket_port": port,
                            "error_page.default": Server.error_page})

    # Create an instance of the main handler object.
    cherrypy.tree.mount(Server(do_auth), "/")

    # Assume things are going to go well.
    retval = 0

    # Create a pid file so we can make sure it's owned by the proper user later
    # on.
    if daemonize:
        with open(pidfile, "a"):
            pass

    # Try to drop privileges if requested, since we've bound to whatever port
    # superuser privileges were needed for already.
    if drop_priv:
        # If we're on windows, don't supply any username/groupname, and just
        # assume we should drop priveleges.
        if os_name == "Windows":
            cherrypy.process.plugins.DropPrivileges(cherrypy.engine).subscribe()
        elif os.getuid() == 0:
            # Reaching here means we're on unix, and we are the root user, so go
            # ahead and drop privileges to the requested user/group.
            import grp
            import pwd

            # Set the username and groupname to drop privileges down to.
            user = "@SERVER_USER@"
            group = "@SERVER_GROUP@"

            try:
                uid = pwd.getpwnam(user).pw_uid
            except KeyError:
                tangelo.log("no such user '%s' to drop privileges to" % (user), "ERROR")
                sys.exit(1)

            try:
                gid = grp.getgrnam(group).gr_gid
            except KeyError:
                tangelo.log("no such group '%s' to drop privileges to" % (group), "ERROR")
                sys.exit(1)

            cherrypy.process.plugins.DropPrivileges(cherrypy.engine, uid=uid, gid=gid).subscribe()

            # Make sure the log file and pid file are owned by the same,
            # non-superuser.
            os.chown(logfile, uid, gid)
            os.chown(pidfile, uid, gid)

    # If we are daemonizing, we have to set things up in a certain way:
    #
    # 1. We fork ourselves immediately, so the child process, which will
    # actually start CherryPy, doesn't scribble on the screen.
    #
    # 2. We get the parent process to poll the logfile for specific messages
    # indicating success or failure, and use these to print an informative
    # message on screen.
    if daemonize:
        fork = os.fork()

        # Fork the process to allow the parent to poll the logfile to check for
        # success.
        if fork == 0:
            # Return value of 0 means this branch is the child - start the
            # process.
            cherrypy.process.plugins.Daemonizer(cherrypy.engine).subscribe()
            cherrypy.process.plugins.PIDFile(cherrypy.engine, pidfile).subscribe()
            cherrypy.engine.start()
            cherrypy.engine.block()
        else:
            # This branch is the parent - poll the log file and print a message
            # on stdout.
            f = open(logfile)
            f.seek(0, 2)
            done = False
            while not done:
                cur_pos = f.tell()
                line = f.readline()
                if not line:
                    f.seek(cur_pos)
                else:
                    if "Bus STARTED" in line:
                        retval = 0
                        sys.stderr.write("success (serving on %s)\n" % location)
                        done = True
                    elif "Error" in line:
                        retval = 1
                        sys.stderr.write("failed (check tangelo.log for reason)\n")
                        done = True
                    elif "Serving on" in line:
                        location = line.split("Serving on")[1].strip()
    else:
        cherrypy.engine.start()
        cherrypy.engine.block()

    return retval

def stop():
    retval = 0
    sys.stderr.write("stopping tangelo...")

    if os.path.exists(pidfile):
        f = open(pidfile)

        try:
            pid = int(f.read())
        except ValueError:
            sys.stderr.write("failed (tangelo.pid does not contain a valid process id)\n")
            return 1

        try:
            os.kill(pid, signal.SIGKILL)
            os.remove(pidfile)
        except OSError:
            sys.stderr.write("failed (could not kill process %d)\n" % (pid))
            retval = 1

    if retval == 0:
        sys.stderr.write("success\n")

    return retval

def restart():
    stopval = stop()
    if stopval == 0:
        return start()
    else:
        return stopval

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Control execution of a Tangelo server.")
    p.add_argument("-d", "--no-daemon", action="store_true", help="run Tangelo in-console (not as a daemon).")
    p.add_argument("-a", "--no-auth", action="store_true", help="disable HTTP authentication (i.e. processing of .htaccess files).")
    p.add_argument("-p", "--no-drop-privileges", action="store_true", help="disable privilege drop when started as superuser.")
    p.add_argument("--hostname", type=str, default=None, metavar="HOSTNAME", help="overrides configured hostname on which to run Tangelo")
    p.add_argument("--port", type=int, default=None, metavar="PORT", help="overrides configured port number on which to run Tangelo")
    p.add_argument("--logdir", type=str, default=None, metavar="DIR", help="where to place the log file (rather than in the directory where this program is")
    p.add_argument("--piddir", type=str, default=None, metavar="DIR", help="where to place the PID file (rather than in the directory where this program is")
    p.add_argument("action", metavar="<start|stop|restart>", help="perform this action for the current Tangelo instance.")
    args = p.parse_args()

    no_daemon = args.no_daemon
    do_auth = not args.no_auth
    drop_priv = not args.no_drop_privileges
    action = args.action
    hostname = args.hostname or "@SERVER_HOSTNAME@"
    port = args.port or @SERVER_PORT@
    logdir = args.logdir
    piddir = args.piddir

    # Configured variables.
    cherry = "@CherryPy_EXECUTABLE@"

    # Detect operating system (and OSX version, if applicable).
    os_name = platform.system()
    if os_name == "Darwin":
        version = map(int, platform.mac_ver()[0].split("."))

    # Determine the current directory based on the invocation of this script.
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tangelo.set_webroot(current_dir + "/web")

    # Decide whether to daemonize, based on whether the user wishes not to, and
    # whether the platform supports it.
    daemonize = not no_daemon and not(os_name == "Windows" or (os_name == "Darwin" and version[1] == 6))

    # Get the path of the tangelo script.
    path = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Determine the paths to place the PID file and log file in.  This defaults
    # to the same directory that contains the tangelo control script.
    if piddir is None:
        pidpath = path
    else:
        pidpath = os.path.abspath(piddir)
    pidfile = pidpath + "/tangelo.pid"

    if logdir is None:
        logpath = path
    else:
        logpath = os.path.abspath(logdir)
    logfile = logpath + "/tangelo.log"

    # Dispatch on action argument.
    code = 1
    if action == "start":
        code = start()
    elif action == "stop":
        if not daemonize:
            sys.stderr.write("error: stop action not supported on this platform\n")
            sys.exit(1)
        code = stop()
    elif action == "restart":
        if not daemonize:
            sys.stderr.write("error: restart action not supported on this platform\n")
            sys.exit(1)
        code = restart()
    else:
        p.print_usage()
        code = 1

    sys.exit(code)
